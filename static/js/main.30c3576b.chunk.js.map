{"version":3,"sources":["components/Counter.js","action_types/index.js","actions/index.js","containers/VisibleCounter.js","App.js","serviceWorker.js","reducers/CountReducer.js","store.js","index.js"],"names":["Counter","_this$props","this","props","count","onIncreaseClick","react_default","a","createElement","className","onClick","Component","types","INCREASE_TODO","increaseTodo","type","VisibleCounter","connect","state","CountReducer","dispatch","actions","App","containers_VisibleCounter","Boolean","window","location","hostname","match","defaultState","reducer","combineReducers","arguments","length","undefined","action","Number","store","createStore","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAGqBA,0LACR,IAAAC,EAC4BC,KAAKC,MAA/BC,EADFH,EACEG,MAAOC,EADTJ,EACSI,gBAEd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,YAAOJ,KAGfE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASL,GAA7C,sBAbaM,cCHxBC,EAAQ,CACjBC,cAAe,iBCENC,EAAe,WACxB,MAAO,CACHC,KAAMH,EAAMC,gBCYpB,IAEeG,EAFQC,YAbvB,SAAyBC,GACrB,MAAO,CACHd,MAAOc,EAAMC,aAAaf,QAIlC,SAA4BgB,GACxB,MAAO,CACHf,gBAAiB,kBAAMe,EAASC,QAKjBJ,CAA6CjB,GCDrDsB,mLAVX,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACe,EAAD,eALQZ,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECjBAC,EAAe,CAAEzB,MAAO,GCE9B,IAAM0B,EAAUC,YAAgB,CAC5BZ,aDDW,WAAoD,IAA9BD,EAA8Bc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBH,EAAcM,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD9B,EAAQc,EAAMd,MAEpB,OAAQ+B,EAAOpB,MACX,KAAKH,EAAMC,cACP,MAAO,CAACT,MAAOgC,OAAOhC,GAAS,GACnC,QACI,OAAOc,MCDJmB,EAFHC,YAAYR,WCExBS,IAASC,OACLlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUJ,MAAOA,GACb/B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACIpC,EAAAC,EAAAC,cAACmC,EAAD,QAGVC,SAASC,eAAe,SH8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30c3576b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../styles/counter.css';\n\nexport default class Counter extends Component {\n    render() {\n        const {count, onIncreaseClick} = this.props;\n\n        return (\n            <div className=\"second-container\">\n                <div className=\"row justify-content-md-center\">\n                    <div className=\"col-md-1 count-label\">\n                        <span>{count}</span>\n                    </div>\n                </div>\n                <div className=\"row justify-content-md-center\">\n                    <div className=\"col-md-1\">\n                        <button className=\"btn btn-primary\" onClick={onIncreaseClick}>Increase</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","export const types = {\n    INCREASE_TODO: 'INCREASE_TODO'\n};","//Action Creatorexport \nimport {types} from '../action_types/index';\n\nexport const increaseTodo = () => {\n    return {\n        type: types.INCREASE_TODO,\n    }\n}\n","import {connect} from 'react-redux'\nimport Counter from '../components/Counter'\nimport * as actions from '../actions'\n\nfunction mapStateToProps(state) {\n    return {\n        count: state.CountReducer.count\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onIncreaseClick: () => dispatch(actions.increaseTodo())\n    }\n    \n}\n\nconst VisibleCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);\n\nexport default VisibleCounter;","import React, { Component } from 'react';\nimport './App.css';\nimport VisibleCounter from './containers/VisibleCounter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <VisibleCounter />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {types} from '../action_types/index';\nconst defaultState = { count: 0};\n\nexport default function CountReducer(state = defaultState, action) {\n    const count = state.count\n    \n    switch (action.type) {\n        case types.INCREASE_TODO:\n            return {count: Number(count) + 1}\n        default:\n            return state\n    }\n}","import {createStore, combineReducers} from 'redux'\nimport CountReducer from './reducers/CountReducer'\n\nconst reducer = combineReducers({\n    CountReducer\n});\n\nlet store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}